package com.pugicorn.spotifake_server.controller;


import com.pugicorn.spotifake_server.entity.Party;
import com.pugicorn.spotifake_server.entity.PartyUser;
import com.pugicorn.spotifake_server.entity.Playlist;
import com.pugicorn.spotifake_server.mapper.PartyRepository;
import com.pugicorn.spotifake_server.mapper.PartyUserRepository;
import com.pugicorn.spotifake_server.mapper.PlaylistRepository;
import com.pugicorn.spotifake_server.mapper.PlaylistTrackRepository;
import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/party") // This means URL's start with /demo (after Application path)
public class PartyController {
    @Autowired
    private PartyRepository partyRepository;

    @Autowired
    private PlaylistRepository playlistRepository;

    @Autowired
    private PlaylistTrackRepository playlistTrackRepository;

    @Autowired
    private PartyUserRepository partyUserRepository;

    @PostMapping(path="") // Map ONLY POST Requests
    public @ResponseBody
    String addParty (@RequestBody Map<String, Object> payload) {

        String difficulty = payload.get("difficulty").toString();
        int nbTracks = Integer.parseInt(payload.get("nbTracks").toString());
        ArrayList users = (ArrayList) payload.get("userList");
        ArrayList playlistList = (ArrayList) payload.get("playlistList");

        String owner = payload.get("owner").toString();

        Playlist pl = new Playlist();
        pl.setId( UUID.randomUUID().toString());
        pl.setIdUser(owner);
        pl.setTitle(owner + "Party");
        pl.setNbTracks(nbTracks);

        Playlist addedPl = playlistRepository.save(pl);


        Party pa = new Party();
        pa.setIdPlaylist(addedPl.getId());
        pa.setDifficulty(Integer.parseInt(difficulty));
        pa.setNbTracks(nbTracks);
        pa.setAutoGenerated(false);
        pa.setDirect(false);

        Party par = partyRepository.save(pa);


        List<PartyUser> listPartUser = new ArrayList<>();
        for (Object user : users) {
            listPartUser.add(new PartyUser(par.getId(), user.toString()));
        }
        List<String> listPlay = new ArrayList<>();
        for (Object play : playlistList) {
            listPlay.add(play.toString());
        }

        partyUserRepository.saveAll(listPartUser);

        pl.setIdParty(par.getId());

        playlistTrackRepository.addMusicInPlayByNB(listPlay, nbTracks, addedPl.getId());

        return "ok";
    }

    @GetMapping(path="")
    public @ResponseBody
    Iterable<Party> getAllParty(
            @RequestHeader Map<String, String> header) {
        // This returns a JSON or XML with the users

        String idUser = header.get("myid");
        return partyRepository.findAllForUser(idUser);
    }

    @GetMapping(path="/{id}")
    public @ResponseBody
    Optional<Party> getUer(@PathVariable String id) {
        // This returns a JSON or XML with the users
        return partyRepository.findById(id);
    }
}