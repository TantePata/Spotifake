package com.pugicorn.spotifake_server.controller;


import com.pugicorn.spotifake_server.entity.Party;
import com.pugicorn.spotifake_server.mapper.PartyRepository;
import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Map;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/party") // This means URL's start with /demo (after Application path)
public class PartyController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PartyRepository partyRepository;

    @PostMapping(path="") // Map ONLY POST Requests
    public @ResponseBody
    String addParty (@RequestBody Map<String, Object> payload,
                      HttpServletResponse serverResponse)
            throws IOException { OkHttpClient client = new OkHttpClient();


        String idPlaylist = payload.get("idPlaylist").toString();
        String difficulty = payload.get("difficulty").toString();
        String autoGenerated = payload.get("autoGenerated").toString();
        String direct = payload.get("direct").toString();

        Party p = new Party();
        p.setIdPlaylist(idPlaylist);
        p.setDifficulty(Integer.parseInt(difficulty));
        p.setAutoGenerated(Boolean.parseBoolean(autoGenerated));
        p.setDirect(Boolean.parseBoolean(direct));
        return "ok";
    }

    @GetMapping(path="")
    public @ResponseBody
    Iterable<Party> getAllParty(
            @RequestHeader Map<String, String> header) {
        // This returns a JSON or XML with the users

        String idUser = header.get("myid");
        return partyRepository.findAllForUser(idUser);
    }

    @GetMapping(path="/{id}")
    public @ResponseBody
    Optional<Party> getUer(@PathVariable String id) {
        // This returns a JSON or XML with the users
        return partyRepository.findById(id);
    }
}