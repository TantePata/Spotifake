package com.pugicorn.spotifake_server.controller;


import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.pugicorn.spotifake_server.entity.Playlist;
import com.pugicorn.spotifake_server.entity.User;
import com.pugicorn.spotifake_server.mapper.PlaylistRepository;
import com.pugicorn.spotifake_server.mapper.UserRepository;
import okhttp3.Call;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/playlist") // This means URL's start with /demo (after Application path)
public class PlaylistController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PlaylistRepository playlistRepository;
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path = "")
    public @ResponseBody
    List<Playlist> getAllUserPlaylist(
            @RequestHeader Map<String, String> header,
            HttpServletResponse serverResponse,
            @RequestParam("name") String username)
            throws IOException {

        OkHttpClient client = new OkHttpClient();

        String token = header.get("token");

        Request request = new Request.Builder()
                .url("https://api.spotify.com/v1" + "/me/playlists?limit=50&offset=0")
                .addHeader("authorization", "Bearer " + token)
                .build();

        Call call = client.newCall(request);
        Response response = call.execute();

        List<Playlist> listPlayToAdd = new ArrayList<>();
        List<Playlist> listPlayAllObject = new ArrayList<>();
        List<User> listUsertToInsert = new ArrayList<>();
        if (response.code() == 200) {
            JsonParser jsonParser = new JsonParser();
            JsonObject objectFromString = jsonParser.parse(response.body().string()).getAsJsonObject();

            JsonArray listPlay = objectFromString.get("items").getAsJsonArray();

            for (JsonElement plays : listPlay) {
                Playlist p = new Playlist(plays);

                Optional<Playlist> ps = playlistRepository.findById(p.getId());
                if (! ps.isPresent()) {
                    listPlayToAdd.add(p);
                }

                Optional<User> u = userRepository.findById(p.getIdUser());
                if (! u.isPresent()) {
                    Request requestUser = new Request.Builder()
                            .url("https://api.spotify.com/v1" + "/users/" + p.getIdUser())
                            .addHeader("authorization", "Bearer " + token)
                            .build();

                    Call callUser = client.newCall(requestUser);
                    Response responseUser = callUser.execute();

                    User n = new User(responseUser.body().string(), token);
                    listUsertToInsert.add(n);

                }

                listPlayAllObject.add(p);
            }
            userRepository.saveAll(listUsertToInsert);
            playlistRepository.saveAll(listPlayToAdd);
        } else {

            JsonElement jelement = new JsonParser().parse(response.body().string());
            JsonObject jobject = jelement.getAsJsonObject();

            serverResponse.sendError(response.code(), jobject.getAsJsonObject("error").get("message").toString());
        }

        return listPlayAllObject;
    }
}